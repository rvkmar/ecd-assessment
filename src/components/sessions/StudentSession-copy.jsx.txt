import React, { useState, useEffect } from "react";
import Card from "../ui/Card";
import Modal from "../ui/Modal";

export default function StudentSession({ sessionId, onFinish }) {
  const [session, setSession] = useState(null);
  const [task, setTask] = useState(null);
  const [items, setItems] = useState([]);
  const [answers, setAnswers] = useState({});
  const [currentTaskId, setCurrentTaskId] = useState(null);
  const [result, setResult] = useState(null);
  const [feedback, setFeedback] = useState(null);

  // Load session + linked task + items
  useEffect(() => {
    async function fetchSession() {
      const res = await fetch(`/api/sessions/${sessionId}`);
      if (res.ok) {
        const data = await res.json();
        setSession(data);
        setAnswers(data.responses || {});

        // fetch linked task
        const tRes = await fetch(`/api/tasks/${data.taskId}`);
        if (tRes.ok) {
          const t = await tRes.json();
          setTask(t);

          // fetch all items
          const iRes = await fetch(`/api/items`);
          if (iRes.ok) {
            const allItems = await iRes.json();
            setItems(allItems.filter((i) => t.itemIds.includes(i.id)));
          }
        }

        // load first/next item
        const nextRes = await fetch(`/api/sessions/${sessionId}/next-task`);
        const next = await nextRes.json();
        if (next && next.taskId) {
          setCurrentTaskId(next.taskId);
        }
      }
    }
    fetchSession();
  }, [sessionId]);

  if (!session || !task) return <p>Loading session...</p>;

  const submitAnswer = async (itemId, answer) => {
    await fetch(`/api/sessions/${sessionId}/submit`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ taskId: itemId, answer }),
    });

    // Ask backend whatâ€™s next
    const nextRes = await fetch(`/api/sessions/${sessionId}/next-task`);
    const next = await nextRes.json();

    if (next && next.taskId) {
      setCurrentTaskId(next.taskId);
    } else {
      // No next â†’ finish session
      await fetch(`/api/sessions/${sessionId}/finish`, { method: "POST" });
      const fb = await fetch(`/api/sessions/${sessionId}/feedback`).then((r) =>
        r.json()
      );
      setFeedback(fb);
      setResult({ score: session.score || 0, total: task.itemIds.length });
    }
  };

  if (feedback) {
    return (
      <Card title="Session Complete ðŸŽ‰">
        <h3>Feedback</h3>
        <ul>
          {feedback.constructs.map((c) => (
            <li key={c.name}>
              {c.name}: {Math.round(c.score * 100)}% ({c.level})
            </li>
          ))}
        </ul>
        <h4>Recommendations</h4>
        <ul>
          {feedback.recommendations.map((r, i) => (
            <li key={i}>{r}</li>
          ))}
        </ul>
        <button
          onClick={onFinish}
          className="mt-4 px-3 py-1 bg-green-500 text-white rounded"
        >
          Exit
        </button>
      </Card>
    );
  }

  const currentItem = items.find((i) => i.id === currentTaskId);

  return (
    <Card title={`Session: ${task.title}`}>
      <p className="text-sm mb-4">
        Task {session.currentTaskIndex + 1} of {task?.itemIds?.length || 0}
      </p>

      {currentItem ? (
        <div className="mb-3">
          <div className="font-medium mb-1">{currentItem.text}</div>

          {currentItem.type === "simple" && (
            <input
              className="border p-1 w-full mb-2"
              value={answers[currentItem.id] || ""}
              onChange={(e) =>
                setAnswers({ ...answers, [currentItem.id]: e.target.value })
              }
              placeholder="Your answer"
            />
          )}

          {currentItem.type === "mcq" && (
            <div className="mb-2">
              {currentItem.choices.map((c) => (
                <label key={c.id} className="block text-sm">
                  <input
                    type="radio"
                    name={currentItem.id}
                    checked={answers[currentItem.id] === c.id}
                    onChange={() =>
                      setAnswers({ ...answers, [currentItem.id]: c.id })
                    }
                  /> {c.text}
                </label>
              ))}
            </div>
          )}

          <button
            onClick={() =>
              submitAnswer(currentItem.id, answers[currentItem.id] || "")
            }
            className="px-3 py-1 bg-blue-500 text-white rounded"
          >
            Submit
          </button>
        </div>
      ) : (
        <p>No task item available</p>
      )}

      <Modal
        isOpen={!!result}
        onClose={() => setResult(null)}
        onConfirm={onFinish}
        title="Assessment Complete"
        message={
          result
            ? `You scored ${result.score} out of ${result.total}.`
            : ""
        }
        confirmClass="bg-green-500 hover:bg-green-600 text-white"
      />
    </Card>
  );
}
