// src/components/tasks/TasksManager.jsx
import React, { useState, useEffect } from "react";
import Card from "../ui/Card";
import Modal from "../ui/Modal";
import TaskDetails from "../tasks/TaskDetails";

export default function TasksManager({ notify, refresh }) {
  const [tasks, setTasks] = useState([]);
  const [taskModels, setTaskModels] = useState([]);
  const [questions, setQuestions] = useState([]);

  const [taskModelId, setTaskModelId] = useState("");
  const [questionId, setQuestionId] = useState("");
  const [modal, setModal] = useState({ open: false, id: null });
  const [detailsTask, setDetailsTask] = useState(null);

  // Load tasks, task models, and questions
  useEffect(() => {
    fetch("/api/tasks")
      .then((r) => r.json())
      .then((data) => setTasks(data || []));

    fetch("/api/taskModels")
      .then((r) => r.json())
      .then((data) => setTaskModels(data || []));

    fetch("/api/questions")
      .then((r) => r.json())
      .then((data) => setQuestions(data || []));
  }, [refresh]);

  // Create a new task instance
  const addTask = async () => {
    if (!taskModelId) return notify("Select a Task Model");

    const res = await fetch("/api/tasks", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        taskModelId,
        questionId: questionId || null,
      }),
    });

    if (res.ok) {
      const newTask = await res.json();
      setTasks((prev) => [...prev, newTask]);
      setTaskModelId("");
      setQuestionId("");
      notify("Task instance created.");
      refresh();
    } else {
      const err = await res.json();
      notify("❌ Failed to add task: " + err.error);
    }
  };

  // Remove a task instance
  const removeTask = async (id) => {
    const res = await fetch(`/api/tasks/${id}`, { method: "DELETE" });
    if (res.ok) {
      setTasks((prev) => prev.filter((t) => t.id !== id));
      notify("Task removed.");
      refresh();
    } else {
      notify("❌ Failed to remove task");
    }
  };

  // Load task details
  const openTaskDetails = async (taskId) => {
    const res = await fetch(`/api/tasks/${taskId}`);
    if (res.ok) {
      const task = await res.json();
      setDetailsTask(task);
    } else {
      notify("❌ Failed to load task details");
    }
  };

  return (
    <Card title="Task Instances">
      {/* Select Task Model */}
      <select
        className="border p-2 w-full mb-2"
        value={taskModelId}
        onChange={(e) => setTaskModelId(e.target.value)}
      >
        <option value="">Select Task Model</option>
        {taskModels.map((tm) => (
          <option key={tm.id} value={tm.id}>
            {tm.name}
          </option>
        ))}
      </select>

      {/* Optional Question Link */}
      <select
        className="border p-2 w-full mb-2"
        value={questionId}
        onChange={(e) => setQuestionId(e.target.value)}
      >
        <option value="">(Optional) Link Question</option>
        {questions.map((q) => (
          <option key={q.id} value={q.id}>
            {q.stem.slice(0, 50)}...
          </option>
        ))}
      </select>

      <button
        onClick={addTask}
        className="px-3 py-1 bg-blue-500 text-white rounded"
      >
        Add Task Instance
      </button>

      <ul className="mt-2 text-sm space-y-1">
        {tasks.map((t) => (
          <li key={t.id} className="flex justify-between items-center">
            <span
              onClick={() => openTaskDetails(t.id)}
              className="cursor-pointer hover:underline"
            >
              {t.id} – from model <code>{t.taskModelId}</code>
            </span>
            <button
              onClick={() => setModal({ open: true, id: t.id })}
              className="px-2 py-0.5 bg-red-500 text-white rounded text-xs"
            >
              Remove
            </button>
          </li>
        ))}
      </ul>

      {/* Confirm Delete */}
      <Modal
        isOpen={modal.open}
        onClose={() => setModal({ open: false, id: null })}
        onConfirm={() => {
          const idToRemove = modal.id;
          setModal({ open: false, id: null });
          removeTask(idToRemove);
        }}
        title="Confirm Delete"
        message="Remove this task instance? This will also remove linked sessions."
      />

      {/* Task Details */}
      {detailsTask && (
        <TaskDetails task={detailsTask} onClose={() => setDetailsTask(null)} />
      )}
    </Card>
  );
}
